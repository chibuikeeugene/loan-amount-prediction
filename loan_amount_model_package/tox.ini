# Using Tox we can (on multiple operating systems):
# + Eliminate PYTHONPATH challenges when running scripts/tests
# + Eliminate virtualenv setup confusion
# + Streamline steps such as model training, model publishing


[tox]
envlist = test_package, typechecks, lint, stylechecks
skipsdist = True

[testenv]
allowlist_externals = poetry
whitelist_externals = poetry

commands=
	pip install --upgrade poetry
    poetry install

[testenv:test_package]
setenv =
	PYTHONPATH=.
	PYTHONHASHSEED=0

commands=
	# python regression/train_pipeline.py
	poetry run pytest \
	-s \
	-vv \
	{posargs:tests/}


[testenv:typechecks]
envdir = {toxworkdir}/test_package

deps =
	{[testenv:test_package]deps}

commands = 
	poetry run mypy \
	{posargs:loan_amount_model_package/}


# [testenv:stylechecks]
# envdir = {toxworkdir}/test_package

# deps =
# 	{[testenv:test_package]deps}

# commands =
# 	poetry run flake8 \
# 	{posargs:loan_amount_model_package tests}


[testenv:lint]
envdir = {toxworkdir}/test_package

deps =
	{[testenv:test_package]deps}

commands =
	poetry run isort loan_amount_model_package tests
	poetry run black loan_amount_model_package tests

# [flake8]
# exclude = .git,env
# max-line-length = 100


# [testenv:train]
# envdir = {toxworkdir}/test_package
# deps =
# 	{[testenv:test_package]deps}

# setenv =
# 	{[testenv:test_package]setenv}

# commands=
# 	python regression/train_pipeline.py


# [testenv:documentation]
# envdir = {toxworkdir}/test_package

# deps =
# 	{[testenv:test_package]deps}

# commands = {posargs:sphinx loan_amount_model_package tests}